name: Build and Secure Container Images

on:
  workflow_dispatch:
    inputs:
      job:
        description: 'Select job to run'
        required: true
        default: 'build-signed'
        type: choice
        options:
          - build-unsigned
          - build-signed
          - security-scan
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-unsigned:
    name: Build and Push Unsigned Image
    runs-on: ubuntu-24.04
    if: ${{ github.event.inputs.job == 'build-unsigned' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0

      - name: Authenticate to GHCR
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Metadata for Unsigned Image
        id: docker_meta_unsigned
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/unsigned
          tags: type=sha,format=short

      - name: Build and Push Unsigned Image
        uses: docker/build-push-action@v6.10.0
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.docker_meta_unsigned.outputs.tags }}
          outputs: type=oci,dest=/tmp/output-unsigned.tar
          provenance: true
          sbom: true

  build-signed:
    name: Build and Push Signed Image
    runs-on: ubuntu-24.04
    if: ${{ github.event.inputs.job == 'build-signed' || github.event_name == 'push' || github.event_name == 'pull_request' }}
    outputs:
      tags: ${{ steps.build-and-push.tags }}
      digest: ${{ steps.build-and-push.digest }}
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0
        with:
          cosign-release: 'v2.2.0'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0

      - name: Authenticate to GHCR
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Metadata for Signed Image
        id: docker_meta_signed
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/signed
          tags: type=sha,format=short

      - name: Generate SBOM
        uses: anchore/sbom-action@v0.15.0
        with:
          image: ${{ steps.docker_meta_signed.outputs.tags }}
          format: cyclonedx-json
          output-file: sbom.json

      - name: Build and Push Signed Image
        uses: docker/build-push-action@v6.10.0
        id: build-and-push
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.docker_meta_signed.outputs.tags }}
          outputs: type=oci,dest=/tmp/output-signed.tar
          provenance: true
          sbom: true

      - name: Echo build status
        run: |
          echo "üèóÔ∏è Multi-platform build completed"
          echo "üì¶ Built for platforms: linux/amd64, linux/arm64"
          echo "üè∑Ô∏è Image tags: ${{ steps.docker_meta_signed.outputs.tags }}"

      - name: Sign image with key
        env:
          COSIGN_EXPERIMENTAL: 1
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "üîê Starting image signing process..."
          echo "üì¶ Image to sign: ${{ steps.docker_meta_signed.outputs.tags }}"
          cosign sign --key env://COSIGN_PRIVATE_KEY ${{ steps.docker_meta_signed.outputs.tags }}
          echo "‚úÖ Image signing completed successfully"

      - name: Attach SBOM
        env:
          COSIGN_EXPERIMENTAL: 1
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "üìã Starting SBOM attachment process..."
          echo "üì¶ Attaching SBOM to image: ${{ steps.docker_meta_signed.outputs.tags }}"
          cosign attach sbom --key env://COSIGN_PRIVATE_KEY \
            --type cyclonedx \
            --sbom sbom.json \
            ${{ steps.docker_meta_signed.outputs.tags }}
          echo "‚úÖ SBOM attachment completed successfully"

      - name: Verify image
        env:
          COSIGN_EXPERIMENTAL: 1
          COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
        run: |
          echo "üîç Starting image verification process..."
          echo "üì¶ Verifying image: ${{ steps.docker_meta_signed.outputs.tags }}"
          echo "üîë Using public key from: COSIGN_PUBLIC_KEY"
          cosign verify --key env://COSIGN_PUBLIC_KEY ${{ steps.docker_meta_signed.outputs.tags }}
          echo "‚úÖ Image verification completed successfully"

  generate-slsa:
    name: Generate SLSA Provenance
    needs: build-signed
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.8.0
    with:
      image: ${{ needs.build-signed.outputs.tags }}
      digest: ${{ needs.build-signed.outputs.digest }}
      provenance: true
      sbom: true
      slsa-version: v1.0
      slsa-workflow-recipient: "ghcr.io"
    permissions:
      contents: read
      packages: write
      id-token: write

  security-scan:
    name: Security Scanning
    needs: [build-signed, generate-slsa]
    runs-on: ubuntu-24.04
    if: ${{ github.event.inputs.job == 'security-scan' || github.event_name == 'push' || github.event_name == 'pull_request' }}
    permissions:
      contents: read
      packages: read

    steps:
      - name: Echo scan start
        run: |
          echo "üîç Starting security scanning process..."
          echo "üì¶ Target image: ${{ needs.build-signed.outputs.tags }}"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-signed.outputs.tags }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          github-pat: ${{ secrets.GITHUB_TOKEN }}
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Echo vulnerability scan status
        run: |
          echo "‚úÖ Security scanning completed"

      - name: Run Trivy config scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-signed.outputs.tags }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'config'
          severity: 'CRITICAL,HIGH'
          github-pat: ${{ secrets.GITHUB_TOKEN }}
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Echo config scan status
        run: |
          echo "‚úÖ Configuration scan completed"
          echo "‚ö° Checked for misconfigurations"

      - name: Upload Trivy reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-results.json
            trivy-config-results.json
          retention-days: 20

      - name: Echo upload status
        run: |
          echo "üì§ Security scan reports uploaded"
          echo "üìÑ Reports: trivy-results.json, trivy-config-results.json"
          echo "‚úÖ Security scanning process completed"
